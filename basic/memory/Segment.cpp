/* 메모리 영역
 * 1. 코드 세그먼트
 * 컴파일된 프로그램이 저장되는 영역, read-only 속성
 * 
 * 2. 데이터 세그먼트
 * 전역 변수 및 정적 변수가 저장되는 영역
 * 
 * 3. 힙 세그먼트 (Heap)
 * 동적으로 할당된 변수가 할당되는 영역
 * 
 * 4. 스택 세그먼트 (Call Stack)
 * 함수 매개변수, 지역 변수 및 기타 함수 관련 정보가 저장되는 영역
 * 프로그램에서 현재 실행 중인 서브루틴(함수)에 관한 정보를 저장하는 스택 자료구조
 * 프로그램 시작시 운영체제에 의해 메인 함수가 call stack에 push된다. 그 이 후에 프로그램이 실행되기 시작함
 * 
 * 가. 스택 프레임
 * call stack에 넣고 빼는 데이터 자체를 의미
 * 하나의 함수 호출과 관련된 모든 데이터를 추적함
 * 
 * 나. 스택 포인터
 * 호출 스택의 최상위 위치를 가리키는 레지스터
 */

#include <iostream>

int main()
{
	// 1. 힙 세그먼트
	//		힙에 메모리를 할당하는 것은 스택에 비해 느림
	//		프로그램이 종료될 때까지 메모리 할당이 유지되므로 메모리 누수 주의
	//		동적으로 할당되는 메모리는 포인터를 통해 접근하고, 이를 역참조하는 것은 변수에 직접 접근하는 것보단 느림
	//		힙은 메모리 풀이 크므로 구조체나 클래스를 할당할 수 있음

	int* ptr = new int;	// 힙에서 4바이트로 할당되는 포인터 변수
	int* array = new int[10]; // 힙에서 40바이트로 할당되는 배열


	// 2. 스택 세그먼트
	//		보통 스택은 1MB 크기를 가짐
	//		메모리 할당이 힙에 메모리 할당보다 빠름
	//		스택에 할당된 메모리는 스택 범위 안에 있을 때만 접근 가능
	//		스택은 힙에 비해 크기가 작으므로 공간을 많이 차지하는 지역 변수를 만들지 말 것
	int _array[100];
}